// Mocks generated by Mockito 5.0.10 from annotations
// in location_tracker/test/usecases/create_user_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i3;
import 'package:location_tracker/core/error/failures.dart' as _i7;
import 'package:location_tracker/core/success/success.dart' as _i8;
import 'package:location_tracker/domain/entities/location_entity.dart' as _i5;
import 'package:location_tracker/domain/entities/user_entity.dart' as _i2;
import 'package:location_tracker/domain/entities/websocket_payload_entity.dart'
    as _i9;
import 'package:location_tracker/domain/repositories/user_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUser extends _i1.Fake implements _i2.User {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {
  @override
  String toString() => super.toString();
}

class _FakeStreamController<T> extends _i1.Fake
    implements _i4.StreamController<T> {}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get nick =>
      (super.noSuchMethod(Invocation.getter(#nick), returnValue: '') as String);
  @override
  String get vehicle =>
      (super.noSuchMethod(Invocation.getter(#vehicle), returnValue: '')
          as String);
  @override
  bool get visible =>
      (super.noSuchMethod(Invocation.getter(#visible), returnValue: false)
          as bool);
  @override
  bool get isWeb =>
      (super.noSuchMethod(Invocation.getter(#isWeb), returnValue: false)
          as bool);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
  @override
  _i2.User copyWith(
          {DateTime? createdAt,
          String? uid,
          String? nick,
          _i5.Location? location,
          String? vehicle,
          bool? visible,
          bool? isWeb}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #createdAt: createdAt,
            #uid: uid,
            #nick: nick,
            #location: location,
            #vehicle: vehicle,
            #visible: visible,
            #isWeb: isWeb
          }),
          returnValue: _FakeUser()) as _i2.User);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.Success>> createUser(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#createUser, [user]),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Success>>.value(
                  _FakeEither<_i7.Failure, _i8.Success>()))
          as _i4.Future<_i3.Either<_i7.Failure, _i8.Success>>);
  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.Success>> updateUser(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#updateUser, [user]),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Success>>.value(
                  _FakeEither<_i7.Failure, _i8.Success>()))
          as _i4.Future<_i3.Either<_i7.Failure, _i8.Success>>);
  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.Success>> deleteUser(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#deleteUser, [user]),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Success>>.value(
                  _FakeEither<_i7.Failure, _i8.Success>()))
          as _i4.Future<_i3.Either<_i7.Failure, _i8.Success>>);
  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.Success>> listUsers() =>
      (super.noSuchMethod(Invocation.method(#listUsers, []),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Success>>.value(
                  _FakeEither<_i7.Failure, _i8.Success>()))
          as _i4.Future<_i3.Either<_i7.Failure, _i8.Success>>);
  @override
  _i4.StreamController<_i9.WebSocketPayload> onMessageController() =>
      (super.noSuchMethod(Invocation.method(#onMessageController, []),
              returnValue: _FakeStreamController<_i9.WebSocketPayload>())
          as _i4.StreamController<_i9.WebSocketPayload>);
  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.Success>> hasConnectivity() =>
      (super.noSuchMethod(Invocation.method(#hasConnectivity, []),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Success>>.value(
                  _FakeEither<_i7.Failure, _i8.Success>()))
          as _i4.Future<_i3.Either<_i7.Failure, _i8.Success>>);
  @override
  _i4.StreamController<bool> hasConnectivityStream() =>
      (super.noSuchMethod(Invocation.method(#hasConnectivityStream, []),
              returnValue: _FakeStreamController<bool>())
          as _i4.StreamController<bool>);
}
